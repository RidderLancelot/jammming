{"ast":null,"code":"// Spotify.js\n// Handles Spotify API authentication and search for tracks\n\nconst clientId = 'de8c5edcc39e4f3da974e2e22fe51915';\nconst redirectUri = window.location.origin; // Redirects back to your app\nconst scopes = 'playlist-modify-private playlist-modify-public user-read-private user-read-email playlist-read-private playlist-read-collaborative';\nlet accessToken = '';\nexport function getAccessToken() {\n  if (accessToken) return accessToken;\n  // Check if token is in URL\n  const hash = window.location.hash;\n  if (hash) {\n    const params = new URLSearchParams(hash.substring(1));\n    accessToken = params.get('access_token');\n    const expiresIn = params.get('expires_in');\n    if (accessToken) {\n      // Remove token from URL\n      window.setTimeout(() => accessToken = '', Number(expiresIn) * 1000);\n      window.history.pushState({}, document.title, window.location.pathname);\n      return accessToken;\n    }\n  }\n  // Redirect to Spotify auth\n  const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}` + `&response_type=token&scope=${encodeURIComponent(scopes)}` + `&redirect_uri=${encodeURIComponent(redirectUri)}`;\n  window.location = authUrl;\n}\nexport async function searchTracks(query) {\n  const token = getAccessToken();\n  if (!token) return [];\n  const endpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=10`;\n  const response = await fetch(endpoint, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await response.json();\n  if (!data.tracks || !data.tracks.items) return [];\n  return data.tracks.items.map(track => ({\n    id: track.id,\n    name: track.name,\n    artists: track.artists.map(a => a.name),\n    album: track.album.name\n  }));\n}\nexport async function getCurrentUserId() {\n  const token = getAccessToken();\n  const response = await fetch('https://api.spotify.com/v1/me', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await response.json();\n  return data.id;\n}\nexport async function createPlaylist(userId, name) {\n  const token = getAccessToken();\n  const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      public: false\n    })\n  });\n  const data = await response.json();\n  return data.id;\n}\nexport async function addTracksToPlaylist(playlistId, uris) {\n  const token = getAccessToken();\n  // Add tracks in batches of 100\n  for (let i = 0; i < uris.length; i += 100) {\n    const batch = uris.slice(i, i + 100);\n    await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        uris: batch\n      })\n    });\n  }\n}\nexport async function savePlaylistToSpotify(playlistName, uris) {\n  if (!playlistName || !Array.isArray(uris) || uris.length === 0) {\n    throw new Error('Playlist name and tracks are required');\n  }\n  if (uris.length > 1000) {\n    throw new Error('Spotify playlists are limited to 1000 tracks via API. Please reduce your playlist size.');\n  }\n  const userId = await getCurrentUserId();\n  const playlistId = await createPlaylist(userId, playlistName);\n  await addTracksToPlaylist(playlistId, uris);\n  return playlistId;\n}","map":{"version":3,"names":["clientId","redirectUri","window","location","origin","scopes","accessToken","getAccessToken","hash","params","URLSearchParams","substring","get","expiresIn","setTimeout","Number","history","pushState","document","title","pathname","authUrl","encodeURIComponent","searchTracks","query","token","endpoint","response","fetch","headers","Authorization","data","json","tracks","items","map","track","id","name","artists","a","album","getCurrentUserId","createPlaylist","userId","method","body","JSON","stringify","public","addTracksToPlaylist","playlistId","uris","i","length","batch","slice","savePlaylistToSpotify","playlistName","Array","isArray","Error"],"sources":["/Users/lancelotraavig/Desktop/Coding/Websites/CodeCademy/Portfolio/jammming/src/Javascript/Spotify.js"],"sourcesContent":["// Spotify.js\n// Handles Spotify API authentication and search for tracks\n\nconst clientId = 'de8c5edcc39e4f3da974e2e22fe51915';\nconst redirectUri = window.location.origin; // Redirects back to your app\nconst scopes = 'playlist-modify-private playlist-modify-public user-read-private user-read-email playlist-read-private playlist-read-collaborative';\n\nlet accessToken = '';\n\nexport function getAccessToken() {\n  if (accessToken) return accessToken;\n  // Check if token is in URL\n  const hash = window.location.hash;\n  if (hash) {\n    const params = new URLSearchParams(hash.substring(1));\n    accessToken = params.get('access_token');\n    const expiresIn = params.get('expires_in');\n    if (accessToken) {\n      // Remove token from URL\n      window.setTimeout(() => (accessToken = ''), Number(expiresIn) * 1000);\n      window.history.pushState({}, document.title, window.location.pathname);\n      return accessToken;\n    }\n  }\n  // Redirect to Spotify auth\n  const authUrl =\n    `https://accounts.spotify.com/authorize?client_id=${clientId}` +\n    `&response_type=token&scope=${encodeURIComponent(scopes)}` +\n    `&redirect_uri=${encodeURIComponent(redirectUri)}`;\n  window.location = authUrl;\n}\n\nexport async function searchTracks(query) {\n  const token = getAccessToken();\n  if (!token) return [];\n  const endpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=10`;\n  const response = await fetch(endpoint, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  const data = await response.json();\n  if (!data.tracks || !data.tracks.items) return [];\n  return data.tracks.items.map(track => ({\n    id: track.id,\n    name: track.name,\n    artists: track.artists.map(a => a.name),\n    album: track.album.name,\n  }));\n}\n\nexport async function getCurrentUserId() {\n  const token = getAccessToken();\n  const response = await fetch('https://api.spotify.com/v1/me', {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  const data = await response.json();\n  return data.id;\n}\n\nexport async function createPlaylist(userId, name) {\n  const token = getAccessToken();\n  const response = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ name, public: false }),\n  });\n  const data = await response.json();\n  return data.id;\n}\n\nexport async function addTracksToPlaylist(playlistId, uris) {\n  const token = getAccessToken();\n  // Add tracks in batches of 100\n  for (let i = 0; i < uris.length; i += 100) {\n    const batch = uris.slice(i, i + 100);\n    await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ uris: batch }),\n    });\n  }\n}\n\nexport async function savePlaylistToSpotify(playlistName, uris) {\n  if (!playlistName || !Array.isArray(uris) || uris.length === 0) {\n    throw new Error('Playlist name and tracks are required');\n  }\n  if (uris.length > 1000) {\n    throw new Error('Spotify playlists are limited to 1000 tracks via API. Please reduce your playlist size.');\n  }\n  const userId = await getCurrentUserId();\n  const playlistId = await createPlaylist(userId, playlistName);\n  await addTracksToPlaylist(playlistId, uris);\n  return playlistId;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}